import 'package:get/get.dart';
import 'package:skystudy/app/modules/exercises/exercise_utils.dart';
import 'package:skystudy/app/routes/app_pages.dart';
import 'package:skystudy/app/utils/auth_manager.dart';
import 'lesson_service.dart';
import 'lesson_model.dart';
import 'package:logger/logger.dart';

class Exercise1Controller extends GetxController {
  Rxn<LessonModel> lesson = Rxn<LessonModel>();
  var enableContinueButton = false.obs;
  final Logger logger = Logger();

  late String topic;
  late int node;
  late int exercise = 1; // M·∫∑c ƒë·ªãnh l√† b√†i t·∫≠p 1

  @override
  void onInit() {
    super.onInit();

    logger.i('üì• Get.arguments: ${Get.arguments}');

    try {
      topic =
          Get.arguments['topic'] ??
          'Animal'; // N·∫øu kh√¥ng c√≥ topic, m·∫∑c ƒë·ªãnh l√† 'Animal'
      node = Get.arguments['node'] ?? 1; // N·∫øu kh√¥ng c√≥ node, m·∫∑c ƒë·ªãnh l√† 1

      logger.i('‚úÖ onInit - topic: $topic, node: $node');
      loadLesson(topic, node); // Lu√¥n lu√¥n t·∫£i b√†i h·ªçc ƒë·∫ßu ti√™n trong node
    } catch (e) {
      logger.e('‚õî Error in onInit: $e');
    }
    print('Exercise1 - topic: $topic, node: $node');
  }

  // H√†m t·∫£i b√†i h·ªçc t·ª´ server
  Future<void> loadLesson(String topic, int node) async {
    try {
      // Log: L·∫•y token v√† ki·ªÉm tra t√≠nh h·ª£p l·ªá
      logger.i('Fetching token...');
      final token = await AuthManager.getToken();
      final isTokenValid = await AuthManager.isTokenValid();

      logger.i('Token fetched: $token');
      logger.i('Token validity: $isTokenValid');

      if (token == null || !isTokenValid) {
        Get.snackbar('L·ªói', 'Token kh√¥ng h·ª£p l·ªá. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
        Get.offAllNamed(Routes.login); // ƒêi·ªÅu h∆∞·ªõng v·ªÅ trang login
        return;
      }

      // Log: Fetch b√†i h·ªçc
      logger.i('Fetching lesson for topic: $topic, node: $node');

      // G·ªçi LessonService ƒë·ªÉ l·∫•y d·ªØ li·ªáu b√†i h·ªçc
      final result = await LessonService.fetchLesson(topic, node);
      lesson.value = result; // L∆∞u d·ªØ li·ªáu b√†i h·ªçc v√†o lesson

      // Log: D·ªØ li·ªáu b√†i h·ªçc ƒë√£ nh·∫≠n
      logger.i('Fetched lesson: ${lesson.value}');
    } catch (e) {
      // Log l·ªói n·∫øu kh√¥ng th·ªÉ t·∫£i b√†i h·ªçc
      Get.snackbar('L·ªói', 'Kh√¥ng th·ªÉ t·∫£i b√†i h·ªçc');
      logger.e('Error fetching lesson: $e');
    }
  }

  // H√†m chuy·ªÉn sang b√†i t·∫≠p ti·∫øp theo trong node
  void goToNextExercise() {
    if (exercise < 4) {
      // Ki·ªÉm tra xem b√†i t·∫≠p trong node ƒë√£ ho√†n th√†nh ch∆∞a (t·ª´ exercise 1 ƒë·∫øn exercise 4)
      final nextExercise =
          exercise + 1; // TƒÉng b√†i t·∫≠p l√™n 1 (t·ª´ 1 -> 2, 2 -> 3, 3 -> 4)

      final nextRoute = getRouteByExercise(
        nextExercise,
      ); // D√πng h√†m getRouteByExercise ƒë·ªÉ l·∫•y ƒë√∫ng route

      if (nextRoute != null) {
        Get.toNamed(
          nextRoute, // Chuy·ªÉn ƒë·∫øn b√†i t·∫≠p ti·∫øp theo theo ƒë√∫ng route
          arguments: {
            'topic': topic, // Truy·ªÅn topic kh√¥ng ƒë·ªïi
            'node': node, // Truy·ªÅn node kh√¥ng ƒë·ªïi
            'exercise': nextExercise, // Truy·ªÅn b√†i t·∫≠p ti·∫øp theo
          },
        );
      }
    } else {
      // N·∫øu ƒë√£ ho√†n th√†nh t·∫•t c·∫£ b√†i t·∫≠p trong node (exercise == 4)
      final nextNode = node + 1; // Chuy·ªÉn sang node ti·∫øp theo trong c√πng topic

      if (nextNode <= 4) {
        // Ki·ªÉm tra xem c√≤n node n√†o kh√¥ng (gi·∫£ s·ª≠ ch·ªâ c√≥ 4 node trong m·ªói topic)
        Get.toNamed(
          Routes
              .exercise1, // ƒêi t·ªõi b√†i t·∫≠p ƒë·∫ßu ti√™n c·ªßa node m·ªõi (exercise = 1)
          arguments: {
            'topic': topic, // Truy·ªÅn topic kh√¥ng ƒë·ªïi
            'node': nextNode, // Chuy·ªÉn sang node ti·∫øp theo
            'exercise': 1, // ƒê·∫∑t l·∫°i b√†i t·∫≠p l√† b√†i ƒë·∫ßu ti√™n
          },
        );
      } else {
        // N·∫øu kh√¥ng c√≤n node n√†o, th√¥ng b√°o ho√†n th√†nh b√†i h·ªçc
        Get.snackbar('Ho√†n th√†nh', 'B·∫°n ƒë√£ ho√†n t·∫•t b√†i h·ªçc n√†y üéâ');
      }
    }
  }
}
