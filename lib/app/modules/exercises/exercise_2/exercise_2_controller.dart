import 'package:get/get.dart';
import 'package:skystudy/app/routes/app_pages.dart';
import 'package:skystudy/app/modules/exercises/exercise_utils.dart';
import 'lesson_service.dart';
import 'lesson_model.dart';
import 'package:logger/logger.dart';
import 'package:skystudy/app/utils/auth_manager.dart';

class Exercise2Controller extends GetxController {
  Rxn<LessonModel> lesson = Rxn<LessonModel>();
  final Logger logger = Logger();
  var enableContinueButton = false.obs;

  late String topic;
  late int node;
  late int exercise;

  Future<void> loadLesson(String topic, int node) async {
    try {
      // Log: L·∫•y token v√† ki·ªÉm tra t√≠nh h·ª£p l·ªá
      logger.i('Fetching token...');
      final token = await AuthManager.getToken();
      final isTokenValid = await AuthManager.isTokenValid();

      logger.i('Token fetched: $token');
      logger.i('Token validity: $isTokenValid');

      if (token == null || !isTokenValid) {
        Get.snackbar('L·ªói', 'Token kh√¥ng h·ª£p l·ªá. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
        Get.offAllNamed(Routes.login); // ƒêi·ªÅu h∆∞·ªõng v·ªÅ trang login
        return;
      }

      // Log: Fetch b√†i h·ªçc
      logger.i('Fetching lesson for topic: $topic, node: $node, exercise: $exercise');

      // G·ªçi LessonService ƒë·ªÉ l·∫•y d·ªØ li·ªáu b√†i h·ªçc
      final result = await LessonService.fetchLesson(topic, node);
      lesson.value = result; // L∆∞u d·ªØ li·ªáu b√†i h·ªçc v√†o lesson

      // Log: D·ªØ li·ªáu b√†i h·ªçc ƒë√£ nh·∫≠n
      logger.i('Fetched lesson: ${lesson.value}');
    } catch (e) {
      // Log l·ªói n·∫øu kh√¥ng th·ªÉ t·∫£i b√†i h·ªçc
      Get.snackbar('L·ªói', 'Kh√¥ng th·ªÉ t·∫£i b√†i h·ªçc');
      logger.e('Error fetching lesson: $e');
    }
  }

  @override
  void onInit() {
    super.onInit();

    logger.i('üì• Get.arguments: ${Get.arguments}');

    try {
      topic = Get.arguments['topic'] ?? 'Animal';
      node = Get.arguments['node'] ?? 1;
      exercise = Get.arguments['exercise'] ?? 1;

      logger.i('‚úÖ onInit - topic: $topic, node: $node, exercise: $exercise');
      loadLesson(topic, node); // Lu√¥n lu√¥n t·∫£i b√†i h·ªçc ƒë·∫ßu ti√™n trong node
    } catch (e) {
      logger.e('‚õî Error in onInit: $e');
    }
  }

  // H√†m chuy·ªÉn ƒë·∫øn b√†i t·∫≠p ti·∫øp theo trong node
  void goToNextExercise() {
    if (exercise < 4) { // Ki·ªÉm tra xem c√≤n b√†i t·∫≠p n√†o trong node kh√¥ng
      final nextExercise = exercise + 1; // TƒÉng s·ªë b√†i t·∫≠p l√™n 1
      final nextRoute = getRouteByExercise(nextExercise);  // L·∫•y route c·ªßa b√†i t·∫≠p ti·∫øp theo

      if (nextRoute != null) {
        Get.toNamed(
          nextRoute,
          arguments: {'topic': topic, 'node': node, 'exercise': nextExercise}, // Truy·ªÅn topic, node, exercise v√†o page m·ªõi
        );
      }
    }
  }
}
