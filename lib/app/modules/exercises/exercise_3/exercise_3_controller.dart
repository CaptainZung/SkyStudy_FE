import 'dart:convert';
import 'dart:io';
import 'package:flutter_sound/flutter_sound.dart';
import 'package:get/get.dart';
import 'package:http/http.dart' as http;
import 'package:http_parser/http_parser.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:path_provider/path_provider.dart';
import 'package:audioplayers/audioplayers.dart' as audioplayers;
import 'package:skystudy/app/modules/exercises/exercise_utils.dart';
import 'lesson_model.dart';
import 'lesson_service.dart';
import 'package:skystudy/app/api/ai_api.dart';
import 'package:logger/logger.dart';

class Exercise3Controller extends GetxController {
  final logger = Logger();
  FlutterSoundRecorder? _recorder;
  audioplayers.AudioPlayer _audioPlayer = audioplayers.AudioPlayer();

  Rxn<LessonModel> lesson = Rxn<LessonModel>();
  var isRecording = false.obs;
  var isProcessing = false.obs;
  var recognizedText = ''.obs;
  var accuracy = 0.0.obs;
  var pronunciationFeedback = ''.obs;
  var enableContinueButton = true.obs;

  String? recordedFilePath;

  late String topic;
  late int node;
  late int exercise;

  @override
  void onInit() {
    super.onInit();

    logger.i('üì• Get.arguments: ${Get.arguments}');

    try {
      topic = Get.arguments['topic'] ?? 'Animal';
      node = Get.arguments['node'] ?? 1;
      exercise = Get.arguments['exercise'] ?? 3;

      logger.i('‚úÖ onInit - topic: $topic, node: $node, exercise: $exercise');
      loadLesson(topic, node); // Lu√¥n lu√¥n t·∫£i b√†i h·ªçc ƒë·∫ßu ti√™n trong node
    } catch (e) {
      logger.e('‚õî Error in onInit: $e');
    }
  }

  Future<void> initRecorder() async {
    await _recorder!.openRecorder();
    if (!await Permission.microphone.isGranted) {
      await Permission.microphone.request();
    }
  }

  Future<void> loadLesson(String topic, int node) async {
    try {
      final data = await LessonService.fetchLesson(topic, node);
      lesson.value = data;
      logger.i('üì• Lesson loaded: ${data.word}');
    } catch (e) {
      logger.e('‚ùå Failed to load lesson: $e');
      Get.snackbar('L·ªói', 'Kh√¥ng th·ªÉ t·∫£i b√†i h·ªçc');
    }
  }

  Future<void> playSampleAudio() async {
    try {
      await _audioPlayer.play(
        audioplayers.UrlSource(lesson.value!.sound),
      );
    } catch (e) {
      logger.e('üéß Kh√¥ng th·ªÉ ph√°t audio: $e');
    }
  }

  Future<void> startRecording() async {
    if (!await Permission.microphone.isGranted) return;

    isRecording.value = true;

    final tempDir = await getTemporaryDirectory();
    recordedFilePath = '${tempDir.path}/recorded.wav';

    logger.i('üéôÔ∏è B·∫Øt ƒë·∫ßu ghi v√†o: $recordedFilePath');

    await _recorder!.startRecorder(
      codec: Codec.pcm16WAV,
      toFile: recordedFilePath,
      sampleRate: 44100,
      numChannels: 1,
    );
  }

  Future<void> stopRecording() async {
    if (!isRecording.value) return;

    await _recorder!.stopRecorder();
    isRecording.value = false;

    final file = File(recordedFilePath!);
    if (!file.existsSync()) {
      logger.e('‚ùå Kh√¥ng t√¨m th·∫•y file ghi √¢m');
      Get.snackbar('L·ªói', 'Kh√¥ng t√¨m th·∫•y file ghi √¢m');
      return;
    }

    final fileSize = await file.length();
    logger.i('üìÅ File audio size: $fileSize bytes');

    if (fileSize < 5000) {
      logger.w('‚ö†Ô∏è Ghi √¢m qu√° ng·∫Øn, kh√¥ng g·ª≠i l√™n server');
      Get.snackbar('Ghi √¢m qu√° ng·∫Øn', 'H√£y gi·ªØ mic l√¢u h∆°n v√† ph√°t √¢m r√µ r√†ng.');
      return;
    }

    await sendToServer(file.path);
  }

  Future<void> sendToServer(String filePath) async {
    isProcessing.value = true;
    try {
      final sampleSentence = (lesson.value?.word ?? '')
          .replaceAll(RegExp(r'[^\w\s]'), '')
          .toLowerCase();

      logger.i('üì§ G·ª≠i ph√°t √¢m ƒë·∫øn server...');
      logger.i('üì§ sample_sentence: $sampleSentence');
      logger.i('üì§ file: $filePath');

      final request = http.MultipartRequest(
        'POST',
        Uri.parse(ApiConfig.pronunciationCheckEndpoint),
      );

      request.files.add(await http.MultipartFile.fromPath(
        'file',
        filePath,
        contentType: MediaType('audio', 'wav'),
      ));

      request.fields['sample_sentence'] = sampleSentence;

      final response = await request.send();
      final responseData = await response.stream.bytesToString();

      if (response.statusCode == 200) {
        final data = jsonDecode(responseData);
        recognizedText.value = data['recognized_text'] ?? '';
        accuracy.value = (data['accuracy'] ?? 0.0).toDouble();
        pronunciationFeedback.value = data['pronunciation_feedback'] ?? '';

        logger.i('‚úÖ K·∫øt qu·∫£ t·ª´ server:');
        logger.i('üî§ Text: ${recognizedText.value}');
        logger.i('üéØ Accuracy: ${accuracy.value}');
      } else {
        logger.e('‚ùå Server error ${response.statusCode}');
        logger.e('üì• Response: $responseData');
        Get.snackbar('L·ªói', 'Kh√¥ng th·ªÉ ki·ªÉm tra ph√°t √¢m');
      }
    } catch (e) {
      logger.e('üí• L·ªói khi g·ª≠i ph√°t √¢m: $e');
      Get.snackbar('L·ªói', 'Kh√¥ng th·ªÉ g·ª≠i file √¢m thanh');
    } finally {
      isProcessing.value = false;

      // T·ª± xo√° file sau khi d√πng
      try {
        if (recordedFilePath != null && File(recordedFilePath!).existsSync()) {
          File(recordedFilePath!).deleteSync();
          logger.i('üóëÔ∏è ƒê√£ xo√° file t·∫°m');
        }
      } catch (_) {}
    }
  }

  @override
  void onClose() {
    _recorder?.closeRecorder();
    _audioPlayer.dispose();
    super.onClose();
  }

  void goToNextExercise() {
    if (exercise < 4) { // Ki·ªÉm tra xem c√≤n b√†i t·∫≠p n√†o trong node kh√¥ng
      final nextExercise = exercise + 1; // TƒÉng s·ªë b√†i t·∫≠p l√™n 1
      final nextRoute = getRouteByExercise(nextExercise);  // L·∫•y route c·ªßa b√†i t·∫≠p ti·∫øp theo

      if (nextRoute != null) {
        Get.toNamed(
          nextRoute,
          arguments: {'topic': topic, 'node': node, 'exercise': nextExercise}, // Truy·ªÅn topic, node, exercise v√†o page m·ªõi
        );
      }
    } else {
      // N·∫øu l√† b√†i t·∫≠p cu·ªëi (exercise == 4), th√¥ng b√°o ho√†n t·∫•t b√†i h·ªçc
      Get.snackbar('Ho√†n th√†nh', 'B·∫°n ƒë√£ ho√†n t·∫•t b√†i h·ªçc n√†y üéâ');
    }
  }
}
